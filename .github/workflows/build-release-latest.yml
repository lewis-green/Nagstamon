name: build-release-latest
on:
  push:
    tags-ignore: 'v*'
    branches:
      - '**'
      - '!*.*.*'

env:
  python_win_version: 3.10.8
  repo_dir: nagstamon-jekyll/docs/repo
  cr_image: ghcr.io/henriwahl/build-nagstamon

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.7, 3.9]

    steps:
    - uses: actions/checkout@v3
    # somehow weird way to get the hash over the requirements to be aware if they changed
    - id: requirements_hash
      run: echo "HASH=$(md5sum build/requirements/linux.txt | cut -d\  -f1)" >> $GITHUB_OUTPUT
      # docker login is needed for pushing the test image
    - uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    # if image defined by hash over requirements is not pullable aka does not exist it will be created and pushed
    - run: docker pull ${{ env.cr_image }}-${{ github.job }}-${{ matrix.python-version }}-${{ steps.requirements_hash.outputs.HASH }} || /usr/bin/docker build -t ${{ env.cr_image }}-${{ github.job }}-${{ matrix.python-version }}-${{ steps.requirements_hash.outputs.HASH }} --build-arg VERSION=${{ matrix.python-version }} --build-arg REQUIREMENTS="$(cat build/requirements/linux.txt | base64 --wrap=0)" -f build/docker/Dockerfile-${{ github.job }} .
    - run: docker push ${{ env.cr_image }}-${{ github.job }}-${{ matrix.python-version }}-${{ steps.requirements_hash.outputs.HASH }}
    # - name: Lint with flake8
    #   run: |
    #     # stop the build if there are Python syntax errors or undefined names
    #     flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
    #     # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
    #     flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with unittest
      # using the tests in precompiled image makes them way faster instead of creating the test environment every time from scratch
      run: docker run --rm -v $PWD:/src --workdir /src ${{ env.cr_image }}-${{ github.job }}-${{ matrix.python-version }}-${{ steps.requirements_hash.outputs.HASH }} python -m unittest tests/test_*.py

  debian:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v3
      # docker login is needed for pushing the build image
      - uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      # if image defined by hash over requirements is not pullable aka does not exist it will be created and pushed
      - run: docker pull ${{ env.cr_image }}-${{ github.job }} || /usr/bin/docker build -t ${{ env.cr_image }}-${{ github.job }} -f build/docker/Dockerfile-${{ github.job }} .
      - run: docker push ${{ env.cr_image }}-${{ github.job }}
      # building in precompiled image makes them way faster instead of creating the build environment every time from scratch
      - run: /usr/bin/docker run -v ${{ github.workspace }}:/nagstamon -e DEB_BUILD_OPTIONS=nocheck ${{ env.cr_image }}-${{ github.job }}
      - uses: actions/upload-artifact@v3
        with:
          path: build/*.deb
          retention-days: 1
          if-no-files-found: error

  fedora-34:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v3
      # docker login is needed for pushing the build image
      - uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      # if image defined by hash over requirements is not pullable aka does not exist it will be created and pushed
      - run: docker pull ${{ env.cr_image }}-${{ github.job }} || /usr/bin/docker build -t ${{ env.cr_image }}-${{ github.job }} -f build/docker/Dockerfile-${{ github.job }} .
      - run: docker push ${{ env.cr_image }}-${{ github.job }}
      # building in precompiled image makes them way faster instead of creating the build environment every time from scratch
      - run: /usr/bin/docker run -v ${{ github.workspace }}:/nagstamon ${{ env.cr_image }}-${{ github.job }}
      - uses: actions/upload-artifact@v3
        with:
          path: build/*.rpm
          retention-days: 1
          if-no-files-found: error

  fedora-35:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v3
      # docker login is needed for pushing the build image
      - uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      # if image defined by hash over requirements is not pullable aka does not exist it will be created and pushed
      - run: docker pull ${{ env.cr_image }}-${{ github.job }} || /usr/bin/docker build -t ${{ env.cr_image }}-${{ github.job }} -f build/docker/Dockerfile-${{ github.job }} .
      - run: docker push ${{ env.cr_image }}-${{ github.job }}
      # building in precompiled image makes them way faster instead of creating the build environment every time from scratch
      - run: /usr/bin/docker run -v ${{ github.workspace }}:/nagstamon ${{ env.cr_image }}-${{ github.job }}
      - uses: actions/upload-artifact@v3
        with:
          path: build/*.rpm
          retention-days: 1
          if-no-files-found: error

  fedora-36:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v3
      # docker login is needed for pushing the build image
      - uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      # if image defined by hash over requirements is not pullable aka does not exist it will be created and pushed
      - run: docker pull ${{ env.cr_image }}-${{ github.job }} || /usr/bin/docker build -t ${{ env.cr_image }}-${{ github.job }} -f build/docker/Dockerfile-${{ github.job }} .
      - run: docker push ${{ env.cr_image }}-${{ github.job }}
      # building in precompiled image makes them way faster instead of creating the build environment every time from scratch
      - run: /usr/bin/docker run -v ${{ github.workspace }}:/nagstamon ${{ env.cr_image }}-${{ github.job }}
      - uses: actions/upload-artifact@v3
        with:
          path: build/*.rpm
          retention-days: 1
          if-no-files-found: error

  fedora-37:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v3
      # docker login is needed for pushing the build image
      - uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      # if image defined by hash over requirements is not pullable aka does not exist it will be created and pushed
      - run: docker pull ${{ env.cr_image }}-${{ github.job }} || /usr/bin/docker build -t ${{ env.cr_image }}-${{ github.job }} -f build/docker/Dockerfile-${{ github.job }} .
      - run: docker push ${{ env.cr_image }}-${{ github.job }}
      # building in precompiled image makes them way faster instead of creating the build environment every time from scratch
      - run: /usr/bin/docker run -v ${{ github.workspace }}:/nagstamon ${{ env.cr_image }}-${{ github.job }}
      - uses: actions/upload-artifact@v3
        with:
          path: build/*.rpm
          retention-days: 1
          if-no-files-found: error

  rhel-9:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v3
      # docker login is needed for pushing the build image
      - uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      # if image defined by hash over requirements is not pullable aka does not exist it will be created and pushed
      - run: docker pull ${{ env.cr_image }}-${{ github.job }} || /usr/bin/docker build -t ${{ env.cr_image }}-${{ github.job }} -f build/docker/Dockerfile-${{ github.job }} .
      - run: docker push ${{ env.cr_image }}-${{ github.job }}
      # building in precompiled image makes them way faster instead of creating the build environment every time from scratch
      - run: /usr/bin/docker run -v ${{ github.workspace }}:/nagstamon ${{ env.cr_image }}-${{ github.job }}
      - uses: actions/upload-artifact@v3
        with:
          path: build/*.rpm
          retention-days: 1
          if-no-files-found: error

  macos:
    runs-on: macos-10.15
    needs: test
    steps:
      - uses: actions/checkout@v3
      - run: pip3 install --no-warn-script-location -r build/requirements/macos.txt
      - run: cd ${{ github.workspace }}/build; python3 build.py
        env:
          PYTHONPATH: ${{ github.workspace }}
      - uses: actions/upload-artifact@v3
        with:
          path: build/*.dmg
          retention-days: 1
          if-no-files-found: error

  windows-32:
    # better depend on stable build image
    runs-on: windows-2019
    needs: test
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v3
        with:
          python-version: ${{ env.python_win_version }}
          architecture: x86
      #  no PyQt6 for win32 available on pypi.org
      - run: ((Get-Content -path build/requirements/windows.txt -Raw) -replace 'pyqt6.*','pyqt5') | Set-Content -Path build/requirements/windows.txt
      - run: python -m pip install --no-warn-script-location -r build/requirements/windows.txt
      # pretty hacky but no other idea to avoid gssapi being installed which breaks requests-kerberos
      - run: python -m pip uninstall -y gssapi requests-gssapi
      - run: cd ${{ github.workspace }}/build; python build.py
        env:
          PYTHONPATH: ${{ github.workspace }}
      - uses: actions/upload-artifact@v3
        with:
          path: |
            build/dist/*.zip
            build/dist/*.exe
          retention-days: 1
          if-no-files-found: error

  windows-64:
    # better depend on stable build image
    runs-on: windows-2019
    needs: test
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v3
        with:
          python-version: ${{ env.python_win_version }}
          architecture: x64
      - run: python -m pip install --no-warn-script-location -r build/requirements/windows.txt
      # pretty hacky but no other idea to avoid gssapi being installed which breaks requests-kerberos
      - run: python -m pip uninstall -y gssapi requests-gssapi
      - run: cd ${{ github.workspace }}/build; python build.py
        env:
          PYTHONPATH: ${{ github.workspace }}
      - uses: actions/upload-artifact@v3
        with:
          path: |
            build/dist/*.zip
            build/dist/*.exe
          retention-days: 1
          if-no-files-found: error

  windows-64-debug:
    # better depend on stable build image
    runs-on: windows-2019
    needs: test
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v3
        with:
          python-version: ${{ env.python_win_version }}
          architecture: x64
      - run: python -m pip install --no-warn-script-location -r build/requirements/windows.txt
      # pretty hacky but no other idea to avoid gssapi being installed which breaks requests-kerberos
      - run: python -m pip uninstall -y gssapi requests-gssapi
      - run: cd ${{ github.workspace }}/build; python build.py debug
        env:
          PYTHONPATH: ${{ github.workspace }}
      - uses: actions/upload-artifact@v3
        with:
          path: |
            build/dist/*.zip
          retention-days: 1
          if-no-files-found: error

  repo-rpm:
    runs-on: ubuntu-latest
    # if not all are ready there might be trouble when downloading artifacts
    # maybe faster now with build containers
    needs: [fedora-34, fedora-35, fedora-36, fedora-37, rhel-9]
    strategy:
      matrix:
        os_family: [fedora, rhel]
    steps:
      # get binaries created by other jobs
      - uses: actions/download-artifact@v3
      # organize SSH deploy key for nagstamon-repo
      - run: mkdir ~/.ssh
      - run: echo "${{ secrets.NAGSTAMON_REPO_KEY_WEB }}" >  ~/.ssh/id_ed25519
      - run: chmod -R go-rwx ~/.ssh
      # get and prepare nagstamon-jekyll
      - run: git clone git@github.com:HenriWahl/nagstamon-jekyll.git
      - run: rm -rf ${{ env.repo_dir }}/${{ matrix.os_family }}/latest
      - run: mkdir -p ${{ env.repo_dir }}/${{ matrix.os_family }}/latest
      # copy *.rpm files into nagstamon-jekyll
      - run: cp -r artifact/*.${{ matrix.os_family }}*.rpm ${{ env.repo_dir }}/${{ matrix.os_family }}/latest
      # create rpm repo via Fedora container
      - run: docker run --rm -v $PWD/${{ env.repo_dir }}/${{ matrix.os_family }}/latest:/repo fedora /bin/sh -c "dnf -y install createrepo_c && createrepo /repo"
      # commit and push new binaries to nagstamon-repo
      - run: git config --global user.email "repo@nagstamon.de" && git config --global user.name "Nagstamon Repository"
      - run: cd ${{ env.repo_dir }} && git pull && git add . && git commit -am "new latest repo ${{ matrix.os_family }}" && git push

  github-release:
    runs-on: ubuntu-latest
    needs: [debian, fedora-34, fedora-35, fedora-36, fedora-37, rhel-9, macos, windows-32, windows-64, windows-64-debug]
    steps:
      - uses: actions/download-artifact@v3
      - run: cd artifact && md5sum *agstamon* > md5sums.txt
      - run: cd artifact && sha256sum *agstamon* > sha256sums.txt
      - uses: marvinpinto/action-automatic-releases@latest
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: "latest"
          prerelease: true
          files: |
            artifact/*
